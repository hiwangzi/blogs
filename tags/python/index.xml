<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Python on WANG!</title><link>https://hiwangzi.com/tags/python/</link><description>Recent content in Python on WANG!</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 31 Aug 2017 18:20:00 +0800</lastBuildDate><atom:link href="https://hiwangzi.com/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Python 3 基础总结</title><link>https://hiwangzi.com/posts/2017/08/31/python3-newbie-note/</link><pubDate>Thu, 31 Aug 2017 18:20:00 +0800</pubDate><guid>https://hiwangzi.com/posts/2017/08/31/python3-newbie-note/</guid><description>基础 Python 的语法比较简单，采用缩进方式 以 # 开头的语句是注释 当语句以冒号 : 结尾时，缩进的语句视为代码块 没有规定缩进是几个空格还是 Tab，但按照约定俗成的惯例，应该始终坚持使用4个空格的缩进 确保不混用 Tab 和空格 Python 程序是大小写敏感的 输入输出 print() input() 数据类型 整数 浮点数 对于很大或很小的浮点数，用科学计数法表示，把10用e替代，例: 1.23x10⁹就是1.23e9, 0.000012可以写成1.2e-5 字符串 可以用r''表示''内部的字符串默认不转义 布尔值 空值 一个特殊的值，用 None 表示。 常量 变量名全大写表示常量, 事实上仍然是变量 字符串与编码 由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：
#!/usr/bin/env python3 # -*- coding: utf-8 -*- 第一行注释是为了告诉 Linux/OS X系统，这是一个 Python 可执行程序，Windows系统会忽略这个注释； 第二行注释是为了告诉 Python 解释器，按照 UTF-8 编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。 格式化 &amp;gt;&amp;gt;&amp;gt; 'Hello, %s' % 'world' 'Hello, world' &amp;gt;&amp;gt;&amp;gt; 'Hi, %s, you have $%d.</description></item><item><title>MIT 计算机科学及编程导论Python 笔记 1</title><link>https://hiwangzi.com/posts/2017/02/10/mit-introduction-to-computer-science-and-programming-in-python-note-1/</link><pubDate>Fri, 10 Feb 2017 21:05:00 +0800</pubDate><guid>https://hiwangzi.com/posts/2017/02/10/mit-introduction-to-computer-science-and-programming-in-python-note-1/</guid><description>计算机科学及编程导论在 MIT 的课程编号是 6.00.1，是计算机科学及工程学院的经典课程。之前，课程一直使用 Scheme 作为教学语言，不过由于 Python 简单、易学等原因，近年来已经改用 Python 作为教学语言了。（更多介绍）
最初知道这个课程的时候大概是在 2014 年，对于做事拖沓的我，这门课程已经从低清随堂录制变成了 edX 平台的一门 高清的 MOOC，转眼间已经大三，希望自己能够完成自己曾经定下的计划。以下是在我在学习本课程时的一些笔记，在此与大家共享、共勉。
What does a computer do? Fundamentally a computer:
Performs some calculations Remembers results What calculations?
Built in primitives Creating our own methods of calculating Simple calculations are not enough, so good algorithm design also needed to accomplish a task.
Despite its speed and storage, a computer does have limitations</description></item></channel></rss>