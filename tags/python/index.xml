<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Python on WANG!</title><link>https://hiwangzi.com/tags/python/</link><description>Recent content in Python on WANG!</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 31 Aug 2017 18:20:00 +0800</lastBuildDate><atom:link href="https://hiwangzi.com/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Python 3 基础总结</title><link>https://hiwangzi.com/posts/2017/08/31/python3-newbie-note/</link><pubDate>Thu, 31 Aug 2017 18:20:00 +0800</pubDate><guid>https://hiwangzi.com/posts/2017/08/31/python3-newbie-note/</guid><description>基础 Python 的语法比较简单，采用缩进方式 以 # 开头的语句是注释 当语句以冒号 : 结尾时，缩进的语句视为代码块 没有规定缩进是几个空格还是 Tab，但按照约定俗成的惯例，应该始终坚持使用4个空格的缩进 确保不混用 Tab 和空格 Python 程序是大小写敏感的 输入输出 print() input() 数据类型 整数 浮点数 对于很大或很小的浮点数，用科学计数法表示，把10用e替代，例: 1.23x10⁹就是1.23e9, 0.000012可以写成1.2e-5 字符串 可以用r''表示''内部的字符串默认不转义 布尔值 空值 一个特殊的值，用 None 表示。 常量 变量名全大写表示常量, 事实上仍然是变量 字符串与编码 由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：
#!/usr/bin/env python3 # -*- coding: utf-8 -*- 第一行注释是为了告诉 Linux/OS X系统，这是一个 Python 可执行程序，Windows系统会忽略这个注释； 第二行注释是为了告诉 Python 解释器，按照 UTF-8 编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。 格式化 &amp;gt;&amp;gt;&amp;gt; 'Hello, %s' % 'world' 'Hello, world' &amp;gt;&amp;gt;&amp;gt; 'Hi, %s, you have $%d.</description><content:encoded><![CDATA[<h2 id="基础">基础</h2>
<ul>
<li>Python 的语法比较简单，采用缩进方式</li>
<li>以 <code>#</code> 开头的语句是注释</li>
<li>当语句以冒号 <code>:</code> 结尾时，缩进的语句视为代码块</li>
<li>没有规定缩进是几个空格还是 Tab，但按照约定俗成的惯例，应该始终坚持使用4个空格的缩进</li>
<li>确保不混用 Tab 和空格</li>
<li>Python 程序是大小写敏感的</li>
</ul>
<h2 id="输入输出">输入输出</h2>
<ul>
<li><code>print()</code></li>
<li><code>input()</code></li>
</ul>
<h2 id="数据类型">数据类型</h2>
<ul>
<li>整数</li>
<li>浮点数
<ul>
<li>对于很大或很小的浮点数，用科学计数法表示，把10用e替代，例: 1.23x10⁹就是1.23e9, 0.000012可以写成1.2e-5</li>
</ul>
</li>
<li>字符串
<ul>
<li>可以用<code>r''</code>表示<code>''</code>内部的字符串默认不转义</li>
</ul>
</li>
<li>布尔值</li>
<li>空值
<ul>
<li>一个特殊的值，用 <code>None</code> 表示。</li>
</ul>
</li>
<li>常量
<ul>
<li>变量名全大写表示常量, 事实上仍然是变量</li>
</ul>
</li>
</ul>
<h2 id="字符串与编码">字符串与编码</h2>
<p>由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/usr/bin/env python3</span>
<span style="color:#75715e"># -*- coding: utf-8 -*-</span>
</code></pre></div><ul>
<li>第一行注释是为了告诉 Linux/OS X系统，这是一个 Python 可执行程序，Windows系统会忽略这个注释；</li>
<li>第二行注释是为了告诉 Python 解释器，按照 UTF-8 编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。</li>
</ul>
<h2 id="格式化">格式化</h2>
<pre><code>&gt;&gt;&gt; 'Hello, %s' % 'world'
'Hello, world'
&gt;&gt;&gt; 'Hi, %s, you have $%d.' % ('Michael', 1000000)
'Hi, Michael, you have $1000000.'
&gt;&gt;&gt; '%2d-%02d' % (3, 1)
' 3-01'
&gt;&gt;&gt; '%.2f' % 3.1415926
'3.14'
</code></pre><h2 id="list-tuple-与-dict-set">list, tuple 与 dict, set</h2>
<ul>
<li>list: 一种有序的集合, 可以随时添加和删除其中的元素, 函数: <code>append(var)</code>, <code>insert(index, var)</code>, <code>pop()</code>, <code>pop(index)</code>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">classmates <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;Michael&#39;</span>, <span style="color:#e6db74">&#39;Bob&#39;</span>, <span style="color:#e6db74">&#39;Tracy&#39;</span>]
</code></pre></div></li>
<li>tuple: 类似于 list, 但初始化后不能修改
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">classmates <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#39;Michael&#39;</span>, <span style="color:#e6db74">&#39;Bob&#39;</span>, <span style="color:#e6db74">&#39;Tracy&#39;</span>)
</code></pre></div></li>
<li>dict: 字典, 使用键-值(key-value)存储, 具有极快的查找速度, 函数: <code>get(key)</code>, <code>pop(key)</code>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">d <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;Michael&#39;</span>: <span style="color:#ae81ff">95</span>, <span style="color:#e6db74">&#39;Bob&#39;</span>: <span style="color:#ae81ff">75</span>, <span style="color:#e6db74">&#39;Tracy&#39;</span>: <span style="color:#ae81ff">85</span>}
</code></pre></div></li>
<li>set: 类似于 dict, 但不存储 value, 只存储 key(不可重复), 函数: <code>add(key)</code>, <code>remove(key)</code>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># 要创建一个set，需要提供一个list作为输入集合</span>
s <span style="color:#f92672">=</span> set([<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>])
</code></pre></div></li>
</ul>
]]></content:encoded></item><item><title>MIT 计算机科学及编程导论Python 笔记 1</title><link>https://hiwangzi.com/posts/2017/02/10/mit-introduction-to-computer-science-and-programming-in-python-note-1/</link><pubDate>Fri, 10 Feb 2017 21:05:00 +0800</pubDate><guid>https://hiwangzi.com/posts/2017/02/10/mit-introduction-to-computer-science-and-programming-in-python-note-1/</guid><description>计算机科学及编程导论在 MIT 的课程编号是 6.00.1，是计算机科学及工程学院的经典课程。之前，课程一直使用 Scheme 作为教学语言，不过由于 Python 简单、易学等原因，近年来已经改用 Python 作为教学语言了。（更多介绍）
最初知道这个课程的时候大概是在 2014 年，对于做事拖沓的我，这门课程已经从低清随堂录制变成了 edX 平台的一门 高清的 MOOC，转眼间已经大三，希望自己能够完成自己曾经定下的计划。以下是在我在学习本课程时的一些笔记，在此与大家共享、共勉。
What does a computer do? Fundamentally a computer:
Performs some calculations Remembers results What calculations?
Built in primitives Creating our own methods of calculating Simple calculations are not enough, so good algorithm design also needed to accomplish a task.
Despite its speed and storage, a computer does have limitations</description><content:encoded><![CDATA[<p>计算机科学及编程导论在 MIT 的课程编号是 6.00.1，是计算机科学及工程学院的经典课程。之前，课程一直使用 Scheme 作为教学语言，不过由于 Python 简单、易学等原因，近年来已经改用 Python 作为教学语言了。（<a href="http://codingpy.com/article/mit-ocw-introduction-computer-science-using-python/">更多介绍</a>）</p>
<p>最初知道这个课程的时候大概是在 2014 年，对于做事拖沓的我，这门课程已经从低清随堂录制变成了 edX 平台的一门 高清的 MOOC，转眼间已经大三，希望自己能够完成自己曾经定下的计划。以下是在我在学习本课程时的一些笔记，在此与大家共享、共勉。</p>
<h2 id="what-does-a-computer-do">What does a computer do?</h2>
<ul>
<li>
<p>Fundamentally a computer:</p>
<ul>
<li>Performs some calculations</li>
<li>Remembers results</li>
</ul>
</li>
<li>
<p>What calculations?</p>
<ul>
<li>Built in primitives</li>
<li>Creating our own methods of calculating</li>
</ul>
</li>
</ul>
<p>Simple calculations are not enough, so good algorithm design also needed to accomplish a task.</p>
<p>Despite its speed and storage, a computer does have limitations</p>
<ul>
<li>Some problems still too complex</li>
<li>Some problems are fundamentally impossible to computer (e.g. Turing&rsquo;s Halting Problem)</li>
</ul>
<hr>
<h2 id="knowledge">Knowledge</h2>
<ul>
<li>Declarative</li>
<li>Imperative (likes a recipe, &ldquo;how-to&rdquo;)</li>
</ul>
<h2 id="computers">Computers</h2>
<ul>
<li>Fixed-program computers (earliest computers)
To solve specific problems
<ul>
<li>Atanasoff (1941) - linear equations</li>
<li>Turing bombe</li>
</ul>
</li>
<li>Stored-program computers
<img loading="lazy" src="https://hiwangzi.com/posts/2017/02/10/mit-introduction-to-computer-science-and-programming-in-python-note-1/resources/1104579-20170210210225713-1288002435.png" alt="A basic machine architecture"  />
</li>
<li>Program is a recipe. Each programming language provides a set of primitive operations.</li>
<li>Given a fixed set of primitives, a good programmer can program anything.</li>
<li>Anything you can do with a language, you can do with another.</li>
</ul>
<h2 id="about-python">About python</h2>
<ul>
<li>High(✅) vs. Low</li>
<li>General(✅) vs. Targetted</li>
<li>Interpreted(✅) vs. Compiled</li>
</ul>
<h2 id="aspects-of-languages--common-errors">Aspects of languages &amp; Common Errors</h2>
<table>
<thead>
<tr>
<th>Aspects</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Primitive constructs</td>
<td>numbers, strings, simple operators</td>
</tr>
<tr>
<td>Syntax</td>
<td>which strings of charactres and symbols are well-formed</td>
</tr>
<tr>
<td>Static semantics</td>
<td>which syntactically valid strings have a meaning</td>
</tr>
<tr>
<td>Full semantics</td>
<td>what is the meaning associated with a syntactically correct string of symbols with no static semantic errors</td>
</tr>
</tbody>
</table>
<ul>
<li>语法用来描述语言中，什么表述是合法的。</li>
<li>静态语义表示什么程序是有意义的，哪种表达是有意义的。</li>
<li>完整语义即程序想达到什么目的，运行程序会产生什么效果。</li>
</ul>
<h2 id="goal">Goal</h2>
<ul>
<li>Learn the syntax and semantics of a programming language.</li>
<li>Learn how to use those elements to translate “recipes” for solving a problem into a form that the computer can use to do the work for us.</li>
<li><strong>Computational modes of thought enable us to use a suite of methods to solve problems.</strong></li>
</ul>
<h2 id="references">References</h2>
<ul>
<li><a href="http://blog.csdn.net/muzilanlan/article/details/45749823">MIT麻省理工学院公开课：计算机科学及编程导论 Python 笔记1-3</a></li>
<li><a href="http://blog.csdn.net/xiaowanggedege/article/details/7939853">麻省理工公开课《计算机科学及编程导论》中文笔记（第1讲）</a></li>
<li><a href="https://www.douban.com/group/topic/35109573/">【MIT计算机科学与编程导论】打卡及笔记</a></li>
</ul>
]]></content:encoded></item></channel></rss>