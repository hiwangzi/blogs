<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Linux on WANG!</title><link>https://hiwangzi.com/tags/linux/</link><description>Recent content in Linux on WANG!</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 25 Mar 2018 00:00:00 +0800</lastBuildDate><atom:link href="https://hiwangzi.com/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>安装 Arch 中遇到的 Broadcom b43(BCM43228) 网卡问题</title><link>https://hiwangzi.com/posts/2018/03/25/arch-install-with-bcm/</link><pubDate>Sun, 25 Mar 2018 00:00:00 +0800</pubDate><guid>https://hiwangzi.com/posts/2018/03/25/arch-install-with-bcm/</guid><description>之前按照《以官方 Wiki 的方式安装 ArchLinux》，并结合官方文档，成功的在 VirtualBox 环境下安装好了 Arch。虚拟机限于内存、显卡等因素，体验不够好，因此今天准备在旧笔记本实机安装。在第一步联网过程中，就遇到了阻碍，特此记录。</description></item><item><title>什么是 Unix</title><link>https://hiwangzi.com/posts/2018/02/03/what-is-unix/</link><pubDate>Sat, 03 Feb 2018 00:00:00 +0800</pubDate><guid>https://hiwangzi.com/posts/2018/02/03/what-is-unix/</guid><description>关于内核 当计算机启动时，计算机要经历一系列动作，这些动作构成了引导过程。引导过程的最后一个动作是启动一个非常复杂的程序，该程序就被称为内核（Kernel）。 内核的作用是控制计算机，提供基础服务，是操作系统的核心。 内核有许多种类型，但基本可以分为两大类： 单内核：一个庞大的程序自身可以完成所有的事 微内核：一个非常小的程序只执行最基本的任务，其余通过调用其他程序（称为服务器(server)）实现 内核的使用： 大多数 Unix 系统使用的是某种类型的单内核，一些 Unix （例如 OS X，Minix）使用微内核。 Linux 是单内核。 补：Linus 阅读了 Andrew Tanenbaum 的《Operating System: Design and Implementation》，该书解释了 Minix 的设计原则。Linus 选择使用单内核设计 Linux，而 Andrew Tanenbaum 设计的 Minix 使用的是微内核。在 Linux 开始引起注意后不久，Tanenbaum 公开批判这种设计决策。直到今天，Tanenbaum 仍然在批评这种单内核设计。 关于 Unix Unix = Unix 内核 + Unix 实用工具 Unix 过去是属于 AT&amp;amp;T 的商标（必须为大写 UNIX，以下的全大写均指 AT&amp;amp;T 公司的 Unix） 现在可以理解为指代任何 “类Unix” 系统 关于 “类Unix” 的两种理解： 如果操作系统既包含一个 Unix 内核以及一些 Unix 实用工具，又可以运行能够在其他 Unix 操作系统上运行的程序，那么它就是 Unix 系统 如果理解 Unix 的人说这个系统是 Unix，那么它就是 Unix Unix 的历史 20世纪70年代的 Unix：由贝尔实验室转向 Berkeley</description></item><item><title>命令行计算 RSA, Base64, Hash</title><link>https://hiwangzi.com/posts/2017/11/20/calculate-rsa-base64-hash-in-terminal/</link><pubDate>Mon, 20 Nov 2017 15:05:00 +0800</pubDate><guid>https://hiwangzi.com/posts/2017/11/20/calculate-rsa-base64-hash-in-terminal/</guid><description>OpenSSL 是个好工具 👍</description></item><item><title>scp 命令简明介绍</title><link>https://hiwangzi.com/posts/2017/10/11/scp-newbie-note/</link><pubDate>Wed, 11 Oct 2017 10:53:00 +0800</pubDate><guid>https://hiwangzi.com/posts/2017/10/11/scp-newbie-note/</guid><description> 安全复制（英语：Secure copy，缩写SCP）是指在本地主机与远程主机或者两台远程主机之间基于Secure Shell（SSH）协议安全地传输电脑文件。“SCP”通常指安全复制协议或者程序本身。安全复制 - 维基百科，自由的百科全书
其使用方法类似于 cp 命令。
复制文件或目录命令：
复制文件：
将本地文件拷贝到远程 scp 文件名 --用户名@计算机IP或者计算机名称:远程路径 从远程将文件拷回本地 scp --用户名@计算机IP或者计算机名称:文件名 本地路径 复制目录：
将本地目录拷贝到远程 scp -r 目录名 用户名@计算机IP或者计算机名称:远程路径 从远程将目录拷回本地 scp -r 用户名@计算机IP或者计算机名称:目录名 本地路径 注意，如果远程主机使用非默认端口22，可以在命令中指定。例如，从远程主机复制一个文件到本地。
scp -P 2222 user@host:directory/SourceFile TargetFile</description></item><item><title>《鸟哥的Linux私房菜》笔记——04. 简单命令行</title><link>https://hiwangzi.com/posts/2017/10/09/vbird-linux-04/</link><pubDate>Mon, 09 Oct 2017 18:25:00 +0800</pubDate><guid>https://hiwangzi.com/posts/2017/10/09/vbird-linux-04/</guid><description>键入命令 [zill@hiwangzi.com ~]$ command [-options] parameter1 parameter2 ... 指令 选项 参数(1) 参数(2) 注意：有时也可以使用 + 放置于选项或参数之前
例如：
zill@zill-pc:~$ date +%Y/%m/%d 2017/10/09 zill@zill-pc:~$ date +%H:%M 17:32 几个程序 显示日期与时间的指令： date 显示日历的指令： cal 简单好用的计算器： bc（进入交互界面后 scale=number 设置小数点位数） 几个按键 [Tab]：主要用于自动补全 [Ctrl]-c：中断当前程序 [Ctrl]-d：通常代表「键盘输入结束（End Of File, EOF 或 End Of Input）」的意思（可以代替手动输入 exit） [Shift]+{[PageUP]|[Page Down]}：向前翻页|向后翻页 关于帮助文档 1. man 表格的第一行，可以看到「DATE(1)」，其中(1)代表「一般使用者可以使用的指令」。
常见代号及含义（可以通过 man man 获得更详细的说明）：
代号 代表内容 1 使用者在shell环境中可以操作的指令 2 系统核心可调用的函数与工具等 3 一些常用的函數(function)与函数库(library)，大部分为C的函数库(libc) 4 硬件的说明，通常在/dev下的文件 5 设置文件或者是某些文件的格式 6 游戏(games) 7 惯例与协定，例如Linux文件系统、网络协议、ASCII code等等的说明 8 系统管理员可以使用的管理指令 9 跟kernel有关的文件 可以使用 man -f 指令 查找相关指令（名称完全相同）。 可以使用 man -k 指令 搜索相关指令。</description></item><item><title>《鸟哥的Linux私房菜》笔记——03. 磁盘分区</title><link>https://hiwangzi.com/posts/2017/10/09/vbird-linux-03/</link><pubDate>Mon, 09 Oct 2017 14:37:00 +0800</pubDate><guid>https://hiwangzi.com/posts/2017/10/09/vbird-linux-03/</guid><description>Everything is a file.
常见硬件对应于 Linux 下的文件（/dev目录下）
装置 装置在Linux内的档名 SCSI/SATA/U盘硬盘机 /dev/sd[a-p] U盘 /dev/sd[a-p]（与SATA相同） VirtI/O界面 /dev/vd[a-p]（用于虚拟机内） 软盘机 /dev/fd[0-1] 打印机 25针: /dev/lp[0-2]; USB: /dev/usb/lp[0-15] 鼠标 PS2: /dev/psaux; USB: /dev/usb/mouse[0-15] CDROM/DVDROM /dev/scd[0-1]（通用）; /dev/sr[0-1]（通用，CentOS较常见） 当前CDROM/DVDROM /dev/cdrom 当前的鼠标 /dev/mouse 磁带机 IDE: /dev/ht0; SATA/SCSI: /dev/st0 IDE硬盘机 /dev/hd[a-d]（近乎被淘汰） MBR 分区方式 硬盘的第一个扇区主要记录了两个重要的信息，分别是：</description></item><item><title>《鸟哥的Linux私房菜》笔记——02. 关于Linux</title><link>https://hiwangzi.com/posts/2017/10/02/vbird-linux-02/</link><pubDate>Mon, 02 Oct 2017 12:28:00 +0800</pubDate><guid>https://hiwangzi.com/posts/2017/10/02/vbird-linux-02/</guid><description>Unix 历史 1969年以前：伟大的梦想——Bell, MIT 与 GE 的「Multics」系统 1969年：Ken Thompson 的小型 file server system 1973年：Unix 正式诞生（Ritchie等人以 C 语言写出第一个正式 Unix核心） 1977年：重要的 Unix 分支——BSD 的诞生 1979年：重要的 System V 架构（支持x86）与版权宣告 1984年之一：x86 架构的 Minix 操作系统开始编写并于两年后诞生 1984年之二：GNU 计划与 FSF(Free Software Foundation) 基金会的成立 1988年：图形界面 XFree86(X Window System + Free + x86) 计划 1991年：芬兰大学生 Linux Torvalds 的一则简讯 Linux 的核心版本 2.6.18-92.el5 主版本.次版本.释出版本-修改版本 核心被分为两个分支：
主、次版本为奇数：发展中版本(development) 如2.5.xx，这种核心版本主要用在测试与发展新功能，所以通常这种版本仅有核心开发工程师会使用。 如果有新增的核心程序代码，会加到这种版本当中，等到众多工程师测试没问题后，才加入下一版的稳定核心中； 主、次版本为偶数：稳定版本(stable) 如2.6.xx，等到核心功能发展成熟后会加到这类的版本中，主要用在一般家庭计算机以及企业版本中。 重点在于提供使用者一个相对稳定的Linux作业环境平台。 Linux 是一个操作系统最底层的核心以及其提供的核心工具。他是 GNU GPL 授权模式，所以，任何人均可取得源代码，并且可以修改。</description></item><item><title>《鸟哥的Linux私房菜》笔记——01. 计算机概论</title><link>https://hiwangzi.com/posts/2017/10/02/vbird-linux-01/</link><pubDate>Mon, 02 Oct 2017 11:11:00 +0800</pubDate><guid>https://hiwangzi.com/posts/2017/10/02/vbird-linux-01/</guid><description>计算机的五大部分：输入单元、输出单元、CPU（控制单元(Control Unit)、算数逻辑单元(ALU)）、内存。 CPU 的架构
精简指令集（Reduced Instruction Set Computing, RISC），例如：SPARC，ARM 复杂指令集（Complex Instruction Set Computing, RISC），例如：Intel/AMD x86 架构 CPU
外频：CPU 与外部组件进行数据传输时的速度 内频：CPU 内部用来加速工作性能的一个倍数 注：
两者相乘为 CPU 的频率速度 超频：将CPU的倍频或外频更改为更高，但倍频通常被锁定，经常被修改的是外频。 主板芯片组
北桥：系统总线（速度相对较快），内存传输的主要信道 南桥：I/O 总线，连接硬盘、USB、网卡等设备 注：
北桥所支持的频率称为前端总线速度（Front Side Bus, FSB），而每次传送的位数则是总线宽度。 CPU 每次能够处理的数据量称为字组大小（word size）
计算机被称为“32位”或“64位”的主要依据 早期“32位”的CPU中，因为CPU每次能够解析的数据量有限，因此由内存传来的数据量就有所限制，即导致了“32位”CPU最多只能支持到4GB内存 内存主要组件 动态随机访问内存（Dynamic Random Access Memory, DRAM）
CPU 内部第二层缓存（L2 Cache）使用静态随机访问内存（Static Random Access Memory, SRAM） 计算机的分类</description></item><item><title>Debian/Linux 下无线网卡驱动的安装</title><link>https://hiwangzi.com/posts/2017/08/29/install-wifi-driver-for-bcm43228-in-linux/</link><pubDate>Tue, 29 Aug 2017 16:43:00 +0800</pubDate><guid>https://hiwangzi.com/posts/2017/08/29/install-wifi-driver-for-bcm43228-in-linux/</guid><description>在 Debian 下为 BCM43228 无线网卡安装驱动</description></item><item><title>Linux 安装软件的几种方式</title><link>https://hiwangzi.com/posts/2017/08/22/how-to-install-software-for-linux/</link><pubDate>Tue, 22 Aug 2017 16:38:00 +0800</pubDate><guid>https://hiwangzi.com/posts/2017/08/22/how-to-install-software-for-linux/</guid><description>源代码编译安装 源代码包的安装一般为下载软件源代码，然后编译安装。常见的 C 程序软件的安装步骤是 configure, make, make install 三部曲（./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install）。
一句话来解释整个过程：
根据源码包中 Makefile.in 文件的指示，configure 脚本检查当前的系统环境和配置选项，在当前目录中生成 Makefile 文件(还有其它本文无需关心的文件)，然后 make 程序就按照当前目录中的 Makefile 文件的指示将源代码编译为二进制文件，最后将这些二进制文件移动(即安装)到指定的地方(仍然按照 Makefile 文件的指示)。
借助软件包管理器安装 例如借助 yum、apt-get 等管理软件进行安装。
在 Ubuntu 系统上，软件包的格式是 deb，相比于「源代码编译安装」，deb 包这类的二进制包是依赖硬件和软件平台的。
顺便提一点，apt-get只是dpkg的一个前端而已，dpkg 是Debian软件包管理器的基础。而上层的工具，像是 APT，用于从远程获取软件包以及处理复杂的软件包关系。
二进制格式安装 编译好的文件，类似于 Windows 下的 exe，后缀一般为 bin，如 jdk 就有 bin 后缀（虽然 Linux 下没有后缀的概念，但为了好区分，一般文件名都加后缀）。安装就是先给它可执行权限，然后执行，例如：
chmod 777 xxx.bin ./xxx.bin 总结 源代码编译安装最为灵活自由 借助包管理器最为方便 二进制格式安装方式一般被一些闭源的驱动和预编译的安装包所采用 参考 源代码包 - deepin Wiki 深入理解软件包的配置、编译与安装 在 Linux 下安装软件的方法有哪些？各有什么优劣？</description></item></channel></rss>