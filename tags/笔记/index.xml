<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>笔记 on WANG!</title><link>https://hiwangzi.com/tags/%E7%AC%94%E8%AE%B0/</link><description>Recent content in 笔记 on WANG!</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 11 Mar 2018 10:23:00 +0800</lastBuildDate><atom:link href="https://hiwangzi.com/tags/%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml"/><item><title>Unicode 笔记</title><link>https://hiwangzi.com/posts/2018/03/11/unicode-notes/</link><pubDate>Sun, 11 Mar 2018 10:23:00 +0800</pubDate><guid>https://hiwangzi.com/posts/2018/03/11/unicode-notes/</guid><description>自己关于 Unicode 的笔记整理，主要总结自「肖国栋的i自留地」系列博客</description><content:encoded><![CDATA[<h2 id="字符集与字符集编码">「字符集」与「字符集编码」</h2>
<ul>
<li>charset: character set</li>
<li>encoding: charset encoding</li>
</ul>
<p><img loading="lazy" src="https://hiwangzi.com/posts/2018/03/11/unicode-notes/resources/1.png" alt="「字符集与字符集编码」类比于Java中的「接口与实现」"  />
</p>
<h2 id="字符的编号code在unicode中码点code-point">字符的编号（code）在Unicode中：码点（code point）</h2>
<ul>
<li>Unicode provides a unique number for every character.</li>
<li>目前码点的范围 U+0000~U+10FFFF（Unicode 官方表示以后不再扩充）</li>
<li>代码单元（code unit）：指一种转换格式（UTF）中最小的一个分隔。
<ul>
<li>UTF-8：一字节为一个单元，UTF-8可以包含一个单元、二个单元、三个单元及四个单元</li>
<li>UTF-16：两字节为一个单元，UTF-16可以包含一个单元、二个单元</li>
<li>UTF-32：四字节为一个单元，UTF-32只包含一个单元这一种即可</li>
</ul>
</li>
</ul>
<h2 id="三种编码方案">三种编码方案</h2>
<ul>
<li>UTF-8：变长，1-4 字节；</li>
<li>UTF-16：变长，2 或 4 字节；</li>
<li>UTF-32：定长，4 字节。</li>
</ul>
<h2 id="utf-16-为何变长了">UTF-16 为何变长了</h2>
<ul>
<li>UTF-16 的前身 UCS-2 是 16 位定长的编码，它与码点在形式上完全一样</li>
<li>但后来字符扩充，目前的码点数 17 × 65536 ≈ 111 万，而 16 位定长最多 65536 个字符</li>
</ul>
<h2 id="变长variable-length的编码方案">变长（Variable-length）的编码方案</h2>
<ul>
<li>利用高位作区分</li>
<li>利用代理区作区分</li>
</ul>
<h2 id="unicode-的平面">Unicode 的平面</h2>
<ul>
<li>
<p>Unicode 共有码点数 17 × 65536，为了便于管理，每 65536 个码点划分为一个平面。</p>
<p><img loading="lazy" src="https://hiwangzi.com/posts/2018/03/11/unicode-notes/resources/2.png" alt="Unicode Plane"  />
</p>
</li>
<li>
<p>BMP（Basic Multilingual Plane 基本多语言平面），也叫 Plane 0，日常用到的字符绝大多数都落在此平面。（UTF-16只需要两字节编码此平面字符）</p>
</li>
<li>
<p>SP（Supplementary Planes 增补平面），码点值超过了 U+FFFF。（UTF-16需要四字节编码这些字符）</p>
</li>
</ul>
<h2 id="unicode-与-utf-转换">Unicode 与 UTF 转换</h2>
<ul>
<li>UTF 即是 Unicode 转换格式（Unicode (or UCS) Transformation Format）。</li>
</ul>
<h3 id="utf-32">UTF-32</h3>
<ul>
<li>直接对码点补0，补够32位即可。</li>
<li>简单但占空间太大。</li>
</ul>
<h3 id="utf-8">UTF-8</h3>
<ul>
<li>
<p>可以有 1，2，3，4 四种字节组合。</p>
</li>
<li>
<p>采用的即是「高位保留」的方式区分不同变长。</p>
<p><img loading="lazy" src="https://hiwangzi.com/posts/2018/03/11/unicode-notes/resources/3.png" alt="「高位保留」的方式区分不同变长"  />
</p>
</li>
<li>
<p>转换举例</p>
<p><img loading="lazy" src="https://hiwangzi.com/posts/2018/03/11/unicode-notes/resources/4.png" alt="转换举例"  />
</p>
</li>
<li>
<p>如果看到一串的 16 进制有如下的形式：<strong>E</strong>X XX XX <strong>E</strong>X XX XX…每三个三个字节前面都是 <code>E</code> 打头，那么它很可能就是一串汉字的 UTF-8 编码了。</p>
</li>
</ul>
<h3 id="utf-16">UTF-16</h3>
<ul>
<li>UTF-16 是一种变长的 2 或 4 字节编码模式。</li>
<li>BMP 内的字符使用 2 字节编码，其它平面使用 4 字节组成代理对来编码。</li>
<li>其采用的便是「代理区」形式区分不同变长。</li>
<li>BMP 内的代理区
<ul>
<li>高代理区（D800-DBFF）</li>
<li>低代理区（DC00-DFFF）</li>
</ul>
</li>
</ul>
<h2 id="bom">BOM</h2>
<ul>
<li>
<p>BOM = Byte Order Mark</p>
<table>
<thead>
<tr>
<th>Encoding</th>
<th>Representation (hexadecimal)</th>
</tr>
</thead>
<tbody>
<tr>
<td>UTF-8</td>
<td>EF BB BF</td>
</tr>
<tr>
<td>UTF-16 (BE)</td>
<td>FE FF</td>
</tr>
<tr>
<td>UTF-16 (LE)</td>
<td>FF FE</td>
</tr>
<tr>
<td>UTF-32 (BE)</td>
<td>00 00 FE FF</td>
</tr>
<tr>
<td>UTF-32 (LE)</td>
<td>FF FE 00 00</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>BOM 其实就是 <code>U+FEFF</code> (zero-width non-breaking space)这个码点，<code>EF BB BF</code>是该码点在 UTF-8 下的编码。</p>
</li>
<li>
<p>该码点用作 BOM 后，Unicode 不再建议解释为“零宽度非换行空格”。</p>
</li>
<li>
<p>UTF-16 和 UTF-32 的处理单元分别是 2 个字节和 4 个字节，在 C 语言中的定义就决定了这两个超过 8 位的整数需要考虑存储和网络传输的字节序。而 UTF-8 的编码是以 1 个字节为单位处理的，需要考虑下一位时就地址 +1，不会受 CPU 大小端的影响。（参考：<a href="https://www.zhihu.com/question/55140986/answer/142938758">为什么 UTF-8 不存在字节序的问题？ - 孙笑凡的回答 - 知乎</a>）</p>
</li>
</ul>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><a href="https://xiaogd.net/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E7%BC%96%E7%A0%81%EF%BC%88%E4%B8%80%EF%BC%89-charset-vs-encoding/">字符集与编码（一）——charset vs encoding</a></li>
<li><a href="https://xiaogd.net/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E7%BC%96%E7%A0%81%EF%BC%88%E4%BA%8C%EF%BC%89-%E7%BC%96%E5%8F%B7vs%E7%BC%96%E7%A0%81/">字符集与编码（二）——编号 vs 编码</a></li>
<li><a href="https://xiaogd.net/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E7%BC%96%E7%A0%81%EF%BC%88%E4%B8%89%EF%BC%89-%E5%AE%9A%E9%95%BF%E4%B8%8E%E5%8F%98%E9%95%BF/">字符集与编码（三）——定长与变长</a></li>
<li><a href="https://xiaogd.net/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E7%BC%96%E7%A0%81%EF%BC%88%E5%9B%9B%EF%BC%89-unicode/">字符集与编码（四）——Unicode</a></li>
<li><a href="https://xiaogd.net/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E7%BC%96%E7%A0%81%EF%BC%88%E4%BA%94%EF%BC%89-%E4%BB%A3%E7%A0%81%E5%8D%95%E5%85%83%E5%8F%8A-length-%E6%96%B9%E6%B3%95/">字符集与编码（五）——代码单元及 length 方法</a></li>
<li><a href="https://xiaogd.net/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E7%BC%96%E7%A0%81%EF%BC%88%E4%B8%83%EF%BC%89-bom/">字符集与编码（七）——BOM</a></li>
</ul>
]]></content:encoded></item></channel></rss>